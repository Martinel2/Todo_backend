name: Java CI with Gradle

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'
        cache: gradle 

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Install dependencies
      run: ./gradlew dependencies

    - name: Run tests
      env:
        SPRING_PROFILES_ACTIVE: "test"
        DATABASE_URL: "jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1"
        DB_USERNAME: "sa"
        DB_PASSWORD: "password"
      run: ./gradlew build

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: Project
        path: build/libs/*.jar

  cd:
    runs-on: ubuntu-latest
    needs: ci 

    steps:
    - uses: actions/checkout@v4

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: Project
        path: ./build/libs

    # Docker Hub 로그인
    - name: Login to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # Docker 이미지 빌드 및 푸시
    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/todo:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/todo:latest

    - name: Create .ssh directory and add EC2 host key
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Create private key file
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
        chmod 600 private_key.pem

    - name: Deploy to EC2 and restart Docker container
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /home/${{ secrets.EC2_USER }}/project/

          # 기존 컨테이너 중지 및 삭제
          docker stop backend-container || true
          docker rm backend-container || true
          
          # 최신 Docker 이미지 가져오기
          docker pull ${{ secrets.DOCKER_USERNAME }}/todo:latest
          
          # 컨테이너 실행
          docker run -d -p 8080:8080 --name backend-container \
            --restart unless-stopped \
            -e SPRING_PROFILES_ACTIVE=prod \
            -e DATABASE_URL="jdbc:mysql://mysql-container:3306/todo" \
            -e DB_USERNAME="testuser" \
            -e DB_PASSWORD="testpassworD" \
            ${{ secrets.DOCKER_USERNAME }}/todo:latest

          # MySQL 컨테이너가 없다면 실행
          if [ ! "$(docker ps -q -f name=mysql-container)" ]; then
            docker run -d --name mysql-container \
              -e MYSQL_ROOT_PASSWORD=0000 \
              -e MYSQL_DATABASE=todo \
              -e MYSQL_USER=testuser \
              -e MYSQL_PASSWORD=testpassworD \
              -p 3306:3306 \
              --restart unless-stopped \
              mysql:8.0
          fi

          # MySQL 컨테이너가 정상적으로 실행되는지 확인
          sleep 10
          docker logs mysql-container
          mysqladmin ping -h 127.0.0.1 -u testuser -ptestpassworD

    - name: Check if Nginx reverse proxy is working
      run: curl -I http://localhost | grep "HTTP/1.1 200"

    - name: Remove private key file
      run: rm -f private_key.pem
